/*
Problem 1: Write a function to calculate the area of a triangle.*/
ans:*/
function calculateTriangleArea(widgth, height) {
    if (widgth <= 0 || height <= 0) {
        return "Invalid input: widgth and height must be positive values.";
    }
    let area = (widgth * height) / 2;
    return area;
}
let widgth = 5;
let height = 8;
let area = calculateTriangleArea(widgth, height);
console.log(`The area of the triangle with a widgth of ${widgth} and a height of ${height} is ${area.toFixed(2)}.`);

Problem 2: Write a function to convert degrees to radians.
ans:

function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180);
}
let degrees = 90;
let radians = degreesToRadians(degrees);
console.log(`${degrees} degrees is approximately ${radians.toFixed(2)} radians.`);

Problem 3: Create a function calculateFactorial that takes a number and returns its factorial.
Ans:

function factorialRecursive(number) {
    if (number === 0) {
        return 1; 
    } else if (number < 0) {
        return "Invalid input: Factorial is not defined for negative numbers.";
    } else {
        return number * factorialRecursive(number - 1);
    }
}
let num = 5;
let result = factorialRecursive(num);
console.log(`The factorial of ${num} is ${result}.`);

Problem 4: Create a function isPrime that takes a number as a parameter and returns true if it's a prime number, and false otherwise.

Ans:
function isPrime(number) {
    if (number <= 1) {
        return false;
    }
    for (let i = 2; i <= Math.sqrt(number); i++) {
        if (number % i === 0) {
            return false; 
        }
    }
    return true; 
}
let num = 17;
let isNumPrime = isPrime(num);
console.log(`${num} is prime: ${isNumPrime}`);

Problem 5: Create a function mergeArrays that takes two arrays as parameters and returns a new array that merges both arrays.
Ans:
function mergeArrays(array1, array2) {
    return array1.concat(array2);
}
const array1 = [1, 2, 3];
const array2 = [4, 5, 6];

const mergedArray = mergeArrays(array1, array2);
console.log(mergedArray);

Problem 6: Create a function isLeapYear that takes a year as a parameter and returns "This is a leap year" if it's a leap year, and "Not Leap year" otherwise.
Ans:
function isLeapYear(year) {
    if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
        return "This is a leap year";
    } else {
        return "Not a leap year";
    }
}
let year = 2024;
let result = isLeapYear(year);
console.log(`${year} is ${result}.`);

Problem 7: Create a function removeDuplicates that takes an array and returns a new array with duplicates removed.
ANS:
function removeDuplicates(arr) {
    const uniqueArray = Array.from(new Set(arr));
    return uniqueArray;
}
const originalArray = [1, 2, 2, 3, 4, 4, 5];
const newArray = removeDuplicates(originalArray);
console.log(newArray); 


Problem 8: Create a function convertToCelsius that takes a temperature in Fahrenheit and returns the equivalent temperature in Celsius.
Ans:
function convertToCelsius(fahrenheit) {
    const celsius = (fahrenheit - 32) * 5/9;
    return celsius;
}
const fahrenheitTemp = 68;
const celsiusTemp = convertToCelsius(fahrenheitTemp);
console.log(`${fahrenheitTemp} degrees Fahrenheit is approximately ${celsiusTemp.toFixed(2)} degrees Celsius.`);

Problem 9: Write a function to find the maximum of five numbers.
Ans:
function findMaximumOfFive(num1, num2, num3, num4, num5) {
    let max = num1; 

    if (num2 > max) {
        max = num2;
    }
    if (num3 > max) {
        max = num3;
    }
    if (num4 > max) {
        max = num4;
    }
    if (num5 > max) {
        max = num5;
    }

    return max;
}
const num1 = 12;
const num2 = 7;
const num3 = 19;
const num4 = 5;
const num5 = 31;

const maxNumber = findMaximumOfFive(num1, num2, num3, num4, num5);
console.log(`The maximum number is: ${maxNumber}`);

Problem 10: Create a function called evenOdd() that takes a string as a parameter. Now you have to give the output based on the total number of characters in your String. The output will be 'even' or 'odd'. [ Input: ‘JavaScript’ Output: even, Input: ‘Hello’ Output: odd]
Ans:
function evenOdd(inputString) {
    const characterCount = inputString.length;
    if (characterCount % 2 === 0) {
        return "even";
    } else {
        return "odd";
    }
}
const str1 = 'JavaScript';
const result1 = evenOdd(str1);
console.log(`Input: '${str1}' - Output: ${result1}`);

const str2 = 'Hello';
const result2 = evenOdd(str2);
console.log(`Input: '${str2}' - Output: ${result2}`);



=> Answer any 4 questions.

1. Explain the difference between 'if...else' and 'switch' statements for conditional logic.
Ans:
IF-Else:
Used when you have a single condition or multiple conditions that are not directly related.
It can handle complex and diverse conditions, including comparisons, logical operations, and more.
Uses the if keyword, followed by a condition in parentheses. You can also use else if for multiple conditions and an optional else block for a default action.
Conditions can be any expression that evaluates to a Boolean (true or false).
Can handle complex and unrelated conditions, and you can use else if to test multiple conditions sequentially.

switch:
Used when you want to test a single variable against multiple possible values or cases.
Provides a more organized way to handle multiple conditions that are all based on the same variable.
Uses the switch keyword, followed by the variable to test in parentheses.
It uses case labels to specify different possible values for the variable and an optional default label for the default action.


2. What is JavaScript, and what is its primary purpose in web development?
Ans:
In my own view-JavaScript is a versatile and widely-used programming language that plays a fundamental role in web development. It is primarily used for enhancing the interactivity and functionality of websites and web applications. Here are some key aspects of JavaScript and its primary purpose in web development:
JavaScript is a high-level, interpreted scripting language. It is often referred to as the "language of the web" because it is one of the core technologies for web development.
One of the primary roles of JavaScript in web development is client-side scripting. It allows developers to create dynamic and interactive web pages that respond to user input. This interactivity can include features like form validation, animations, and interactive elements.
JavaScript is used to manipulate the Document Object Model (DOM) of a web page. This means it can change, add, or delete HTML elements and their attributes, which is crucial for dynamically updating content and user interfaces.
JavaScript is responsible for handling user interactions and events, such as clicks, mouse movements, and keyboard input. It can trigger actions based on these events, making websites responsive and user-friendly.
JavaScript is commonly used for making asynchronous requests to web servers (e.g., via AJAX) to retrieve data without requiring a page refresh. This is essential for creating interactive and real-time web applications.


3. Explain the difference between var, let, and const when declaring variables in JavaScript.
Ans:
var:
Function Scope: Variables declared with var have function-level scope, which means they are accessible throughout the entire function in which they are declared.
Hoisting: Variables declared with var are hoisted to the top of their function or global context. This means you can access a var variable before it's declared, but it will be undefined.
Reassignment: var variables can be redeclared and reassigned. This can lead to unexpected behavior and makes it harder to maintain code.

Let:
Block Scope: Variables declared with let have block-level scope, which means they are only accessible within the block (e.g., inside an if statement or loop) in which they are defined.
Hoisting: Variables declared with let are hoisted, but they are not initialized. If you try to access a let variable before it's declared, you'll get a Reference Error.
Reassignment: let variables can be reassigned, but they cannot be redeclared within the same block.

const:
Block Scope: Like let, variables declared with const have block-level scope and are only accessible within the block in which they are defined.
Hoisting: Similar to let, const variables are hoisted but not initialized. Attempting to access a const variable before it's declared results in a Reference Error.
Immutability: const variables cannot be reassigned after they are initially assigned a value. However, for objects and arrays, the values they hold can be modified.

4. Explain the concept of "scope" in JavaScript and the difference between global and local scope.
Ans:
In JavaScript, "scope" refers to the context in which variables and functions are declared and can be accessed. The concept of scope plays a crucial role in understanding how variable and function names are resolved and how they interact with each other in your code. JavaScript has two primary types of scope: global scope and local scope.

Difference between Global and Local Scope:
Accessibility:
Global scope variables and functions are accessible from anywhere in your code.
Local scope variables and functions are only accessible within the scope in which they are defined. They are isolated from other parts of the code.
Variable Isolation:
Variables with the same name can coexist in different scopes without conflicts. For example, a local variable with the name "x" in a function does not interfere with a global variable with the same name.
Lifetime:
Global scope variables typically exist for the entire duration of the program or web page.
Local scope variables have a shorter lifetime; they are created when their containing function or block is entered and destroyed when that function or block exits.


5. What is the difference between "null" and "undefined" in JavaScript?

Null:
null is also a primitive value in JavaScript.
It is often explicitly assigned to a variable or used to indicate that a variable or object property should have no value or represent an empty or non-existent object.
It is used to denote the intentional absence of any object value.
When used in conditional statements, it is considered "falsy," just like undefined.
Example: let b = null; console.log(b); // Outputs null

Undefined:
undefined is a primitive value in JavaScript.
It typically means that a variable has been declared but has not been assigned a value. It can also be returned when trying to access a non-existent object property or when a function does not return a value.
Variables that are declared but not assigned a value are automatically initialized to undefined.
When used in conditional statements, it is considered "falsy," meaning it evaluates to false.
Example: let a; console.log(a); // Outputs undefined

